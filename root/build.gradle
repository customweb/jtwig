// ====== Gradle Build Script for wallee-applications ======

// ------ Plugins ------

buildscript {
  repositories {
    // TODO: Solve the chicken-and-egg problem with using the artifactory repo to download
    // the buildtools and configuring the artifactory repo by applying the buildtools plugins!
    def f = project.file("${System.getProperty('user.home')}/.gradle/cw-repo-password.properties")
    def p = f.toPath()
    assert Files.isReadable(p) : "Customweb repo password file does not exist or is not readable by the current user '${System.getProperty('user.name')}': '${p}'"
    def perms = PosixFilePermissions.toString(Files.getPosixFilePermissions(p))
    assert perms.endsWith('------') : "Customweb repo password file '${f}' is accessible by group and/or others (permissions '${perms}'); please make sure that the file is neither readable nor writable nor executable by anyone else than the current user '${System.getProperty('user.name')}'!"
    def props = new Properties()
    try {
      f.withInputStream { props.load(it) }
    } catch(Exception exc) {
      throw new IOException("Failed to read Customweb repo password file '${p}': ${exc}", exc)
    }
    assert props['user'] != null && !props['user'].isEmpty() : "Missing or empty property 'user' in Customweb repo password file '${f}'."
    assert props['password'] != null && !props['password'].isEmpty() : "Missing or empty property 'password' in Customweb repo password file '${f}'."

    maven {
      url 'https://repo.customweb.com/artifactory/repo'
      credentials {
        username props['user']
        password props['password']
      }
    }

	maven {
		url "http://dl.bintray.com/jtwig/maven/"
	}
  }

  dependencies {
    classpath 'io.wallee:buildtools:0.3.+'
  }
}


// ------ Basic Configuration ------

group = 'org.jtwig'
ext.buildVersion = '4.0'
ext.javaVersion = '1.7'
defaultTasks 'buildAll'

apply plugin: 'io.wallee.root-project'


// ------ Dependency Management ------

allprojects {
  project.version = rootProject.version // FIXME: This should go into 'buildtools'!

  afterEvaluate { project ->
      // We log to logback using the slf4j API; for code using commons-logging (resp. java.util.logging)
      // we include the jcl-over-slf4j (resp. jul-to-slf4j) modules which will route logging entries through
      // these API through slf4j to logback. Since jcl-over-slf4j is a complete replacement of the commons-logging
      // API and implementation, we need to exclude the orginal commons-logging classes from all configurations
      // in all projects:
      project.configurations*.exclude group: 'commons-logging'

	  // Cal10N is used by the LocLogger in slf4j-ext, but the latest Cal10N version 0.8.1 contains an
	  // annotation processor which does not (yet) support Java 8. This leads to warning while building
	  // the Wallee project. Since we don't actually use the LocLogger (or any Cal10N classes directly)
	  // we exclude the library from our dependencies:
	  project.configurations*.exclude group: 'ch.qos.cal10n'

	  // Some archaic projects like to pull in the 'xml-apis' as a transient dependency, though
	  // these are part of the standard Java library since about Java 1.5; we never want these:
	  project.configurations*.exclude group: 'xml-apis', module: 'xml-apis'
  }
}


// ---- Imports ----

import java.nio.file.Files;
import java.nio.file.attribute.PosixFilePermissions;
import java.util.Properties;


